{"remainingRequest":"E:\\code\\vue-workspace\\vue-manage-system-master\\node_modules\\babel-loader\\lib\\index.js!E:\\code\\vue-workspace\\vue-manage-system-master\\src\\api\\login\\permission.js","dependencies":[{"path":"E:\\code\\vue-workspace\\vue-manage-system-master\\src\\api\\login\\permission.js","mtime":1554972735782},{"path":"E:\\code\\vue-workspace\\vue-manage-system-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\code\\vue-workspace\\vue-manage-system-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// store/permission.js\n\n/*\r\nimport { asyncRouterMap, constantRouterMap } from '@/router';\r\n\r\nfunction hasPermission(roles, route) {\r\n  if (route.meta && route.meta.role) {\r\n    return roles.some(role => route.meta.role.indexOf(role) >= 0)\r\n  } else {\r\n    return true\r\n  }\r\n}\r\n\r\nconst permission = {\r\n  state: {\r\n    routers: constantRouterMap,\r\n    addRouters: []\r\n  },\r\n  mutations: {\r\n    SET_ROUTERS: (state, routers) => {\r\n      state.addRouters = routers;\r\n      state.routers = constantRouterMap.concat(routers);\r\n    }\r\n  },\r\n  actions: {\r\n    GenerateRoutes({ commit }, data) {\r\n      return new Promise(resolve => {\r\n        const { roles } = data;\r\n        const accessedRouters = asyncRouterMap.filter(v => {\r\n          if (roles.indexOf('admin') >= 0) return true;\r\n          if (hasPermission(roles, v)) {\r\n            if (v.children && v.children.length > 0) {\r\n              v.children = v.children.filter(child => {\r\n                if (hasPermission(roles, child)) {\r\n                  return child\r\n                }\r\n                return false;\r\n              });\r\n              return v\r\n            } else {\r\n              return v\r\n            }\r\n          }\r\n          return false;\r\n        });\r\n        commit('SET_ROUTERS', accessedRouters);\r\n        resolve();\r\n      })\r\n    }\r\n  }\r\n};\r\n\r\nexport default permission;\r\n\r\n*/",{"version":3,"sources":["E:\\code\\vue-workspace\\vue-manage-system-master\\src\\api\\login\\permission.js"],"names":[],"mappings":"AAAA;;AACA","sourcesContent":["// store/permission.js\r\n/*\r\nimport { asyncRouterMap, constantRouterMap } from '@/router';\r\n\r\nfunction hasPermission(roles, route) {\r\n  if (route.meta && route.meta.role) {\r\n    return roles.some(role => route.meta.role.indexOf(role) >= 0)\r\n  } else {\r\n    return true\r\n  }\r\n}\r\n\r\nconst permission = {\r\n  state: {\r\n    routers: constantRouterMap,\r\n    addRouters: []\r\n  },\r\n  mutations: {\r\n    SET_ROUTERS: (state, routers) => {\r\n      state.addRouters = routers;\r\n      state.routers = constantRouterMap.concat(routers);\r\n    }\r\n  },\r\n  actions: {\r\n    GenerateRoutes({ commit }, data) {\r\n      return new Promise(resolve => {\r\n        const { roles } = data;\r\n        const accessedRouters = asyncRouterMap.filter(v => {\r\n          if (roles.indexOf('admin') >= 0) return true;\r\n          if (hasPermission(roles, v)) {\r\n            if (v.children && v.children.length > 0) {\r\n              v.children = v.children.filter(child => {\r\n                if (hasPermission(roles, child)) {\r\n                  return child\r\n                }\r\n                return false;\r\n              });\r\n              return v\r\n            } else {\r\n              return v\r\n            }\r\n          }\r\n          return false;\r\n        });\r\n        commit('SET_ROUTERS', accessedRouters);\r\n        resolve();\r\n      })\r\n    }\r\n  }\r\n};\r\n\r\nexport default permission;\r\n\r\n*/"]}]}