{"remainingRequest":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\babel-loader\\lib\\index.js!E:\\code\\energy\\qiantai\\vue-energy\\src\\components\\common\\chart\\mixins\\index.js","dependencies":[{"path":"E:\\code\\energy\\qiantai\\vue-energy\\src\\components\\common\\chart\\mixins\\index.js","mtime":1557450000121},{"path":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Object$keys from \"E:\\\\code\\\\energy\\\\qiantai\\\\vue-energy\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _JSON$stringify from \"E:\\\\code\\\\energy\\\\qiantai\\\\vue-energy\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\n\nfunction dataHandler(newData, oldData) {\n  if (oldData) {\n    var chart = this.$data._chart; // Get new and old DataSet Labels\n\n    var newDatasetLabels = newData.datasets.map(function (dataset) {\n      return dataset.label;\n    });\n    var oldDatasetLabels = oldData.datasets.map(function (dataset) {\n      return dataset.label;\n    }); // Stringify 'em for easier compare\n\n    var oldLabels = _JSON$stringify(oldDatasetLabels);\n\n    var newLabels = _JSON$stringify(newDatasetLabels); // Check if Labels are equal and if dataset length is equal\n\n\n    if (newLabels === oldLabels && oldData.datasets.length === newData.datasets.length) {\n      newData.datasets.forEach(function (dataset, i) {\n        // Get new and old dataset keys\n        var oldDatasetKeys = _Object$keys(oldData.datasets[i]);\n\n        var newDatasetKeys = _Object$keys(dataset); // Get keys that aren't present in the new data\n\n\n        var deletionKeys = oldDatasetKeys.filter(function (key) {\n          return key !== '_meta' && newDatasetKeys.indexOf(key) === -1;\n        }); // Remove outdated key-value pairs\n\n        deletionKeys.forEach(function (deletionKey) {\n          delete chart.data.datasets[i][deletionKey];\n        }); // Update attributes individually to avoid re-rendering the entire chart\n\n        for (var attribute in dataset) {\n          if (dataset.hasOwnProperty(attribute)) {\n            chart.data.datasets[i][attribute] = dataset[attribute];\n          }\n        }\n      });\n\n      if (newData.hasOwnProperty('labels')) {\n        chart.data.labels = newData.labels;\n        this.$emit('labels:update');\n      }\n\n      if (newData.hasOwnProperty('xLabels')) {\n        chart.data.xLabels = newData.xLabels;\n        this.$emit('xlabels:update');\n      }\n\n      if (newData.hasOwnProperty('yLabels')) {\n        chart.data.yLabels = newData.yLabels;\n        this.$emit('ylabels:update');\n      }\n\n      chart.update();\n      this.$emit('chart:update');\n    } else {\n      if (chart) {\n        chart.destroy();\n        this.$emit('chart:destroy');\n      }\n\n      this.renderChart(this.chartData, this.options);\n      this.$emit('chart:render');\n    }\n  } else {\n    if (this.$data._chart) {\n      this.$data._chart.destroy();\n\n      this.$emit('chart:destroy');\n    }\n\n    this.renderChart(this.chartData, this.options);\n    this.$emit('chart:render');\n  }\n}\n\nexport var reactiveData = {\n  data: function data() {\n    return {\n      chartData: null\n    };\n  },\n  watch: {\n    'chartData': dataHandler\n  }\n};\nexport var reactiveProp = {\n  props: {\n    chartData: {\n      type: Object,\n      required: true,\n      default: function _default() {}\n    }\n  },\n  watch: {\n    'chartData': dataHandler\n  }\n};\nexport default {\n  reactiveData: reactiveData,\n  reactiveProp: reactiveProp\n};",{"version":3,"sources":["E:\\code\\energy\\qiantai\\vue-energy\\src\\components\\common\\chart\\mixins\\index.js"],"names":["dataHandler","newData","oldData","chart","$data","_chart","newDatasetLabels","datasets","map","dataset","label","oldDatasetLabels","oldLabels","newLabels","length","forEach","i","oldDatasetKeys","newDatasetKeys","deletionKeys","filter","key","indexOf","deletionKey","data","attribute","hasOwnProperty","labels","$emit","xLabels","yLabels","update","destroy","renderChart","chartData","options","reactiveData","watch","reactiveProp","props","type","Object","required","default"],"mappings":"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","sourcesContent":["function dataHandler (newData, oldData) {\r\n    if (oldData) {\r\n      let chart = this.$data._chart\r\n  \r\n      // Get new and old DataSet Labels\r\n      let newDatasetLabels = newData.datasets.map((dataset) => {\r\n        return dataset.label\r\n      })\r\n  \r\n      let oldDatasetLabels = oldData.datasets.map((dataset) => {\r\n        return dataset.label\r\n      })\r\n  \r\n      // Stringify 'em for easier compare\r\n      const oldLabels = JSON.stringify(oldDatasetLabels)\r\n      const newLabels = JSON.stringify(newDatasetLabels)\r\n  \r\n      // Check if Labels are equal and if dataset length is equal\r\n      if (newLabels === oldLabels && oldData.datasets.length === newData.datasets.length) {\r\n        newData.datasets.forEach((dataset, i) => {\r\n          // Get new and old dataset keys\r\n          const oldDatasetKeys = Object.keys(oldData.datasets[i])\r\n          const newDatasetKeys = Object.keys(dataset)\r\n  \r\n          // Get keys that aren't present in the new data\r\n          const deletionKeys = oldDatasetKeys.filter((key) => {\r\n            return key !== '_meta' && newDatasetKeys.indexOf(key) === -1\r\n          })\r\n  \r\n          // Remove outdated key-value pairs\r\n          deletionKeys.forEach((deletionKey) => {\r\n            delete chart.data.datasets[i][deletionKey]\r\n          })\r\n  \r\n          // Update attributes individually to avoid re-rendering the entire chart\r\n          for (const attribute in dataset) {\r\n            if (dataset.hasOwnProperty(attribute)) {\r\n              chart.data.datasets[i][attribute] = dataset[attribute]\r\n            }\r\n          }\r\n        })\r\n  \r\n        if (newData.hasOwnProperty('labels')) {\r\n          chart.data.labels = newData.labels\r\n          this.$emit('labels:update')\r\n        }\r\n        if (newData.hasOwnProperty('xLabels')) {\r\n          chart.data.xLabels = newData.xLabels\r\n          this.$emit('xlabels:update')\r\n        }\r\n        if (newData.hasOwnProperty('yLabels')) {\r\n          chart.data.yLabels = newData.yLabels\r\n          this.$emit('ylabels:update')\r\n        }\r\n        chart.update()\r\n        this.$emit('chart:update')\r\n      } else {\r\n        if (chart) {\r\n          chart.destroy()\r\n          this.$emit('chart:destroy')\r\n        }\r\n        this.renderChart(this.chartData, this.options)\r\n        this.$emit('chart:render')\r\n      }\r\n    } else {\r\n      if (this.$data._chart) {\r\n        this.$data._chart.destroy()\r\n        this.$emit('chart:destroy')\r\n      }\r\n      this.renderChart(this.chartData, this.options)\r\n      this.$emit('chart:render')\r\n    }\r\n  }\r\n  \r\n  export const reactiveData = {\r\n    data () {\r\n      return {\r\n        chartData: null\r\n      }\r\n    },\r\n  \r\n    watch: {\r\n      'chartData': dataHandler\r\n    }\r\n  }\r\n  \r\n  export const reactiveProp = {\r\n    props: {\r\n      chartData: {\r\n        type: Object,\r\n        required: true,\r\n        default: () => {}\r\n      }\r\n    },\r\n    watch: {\r\n      'chartData': dataHandler\r\n    }\r\n  }\r\n  \r\n  export default {\r\n    reactiveData,\r\n    reactiveProp\r\n  }"]}]}