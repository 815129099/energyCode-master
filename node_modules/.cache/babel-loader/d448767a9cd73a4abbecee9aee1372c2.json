{"remainingRequest":"D:\\code\\big-screen-vue-datav\\node_modules\\babel-loader\\lib\\index.js!D:\\code\\big-screen-vue-datav\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\code\\big-screen-vue-datav\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\big-screen-vue-datav\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollRankingBoard\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\code\\big-screen-vue-datav\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollRankingBoard\\src\\main.vue","mtime":499162500000},{"path":"D:\\code\\big-screen-vue-datav\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\code\\big-screen-vue-datav\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\code\\big-screen-vue-datav\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\code\\big-screen-vue-datav\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-scroll-ranking-board\" :ref=\"ref\">\n    <div\n      class=\"row-item\"\n      v-for=\"(item, i) in rows\"\n      :key=\"item.toString() + item.scroll\"\n      :style=\"`height: ${heights[i]}px;`\"\n    >\n      <div class=\"ranking-info\">\n        <div class=\"rank\">No.{{ item.ranking }}</div>\n        <div class=\"info-name\" v-html=\"item.name\" />\n        <div class=\"ranking-value\">{{ item.value + mergedConfig.unit }}</div>\n      </div>\n\n      <div class=\"ranking-column\">\n        <div\n          class=\"inside-column\"\n          :style=\"`width: ${item.percent}%;`\"\n        >\n          <div class=\"shine\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvScrollRankingBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'scroll-ranking-board',\n\n      defaultConfig: {\n        /**\n         * @description Board data\n         * @type {Array<Object>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single',\n        /**\n         * @description Value unit\n         * @type {String}\n         * @default unit = ''\n         * @example unit = 'ton'\n         */\n        unit: '',\n        /**\n         * @description Auto sort by value\n         * @type {Boolean}\n         * @default sort = true\n         */\n        sort: true\n      },\n\n      mergedConfig: null,\n\n      rowsData: [],\n\n      rows: [],\n\n      heights: [],\n\n      animationIndex: 0,\n\n      animationHandler: '',\n\n      updater: 0\n    }\n  },\n  watch: {\n    config () {\n      const { stopAnimation, calcData } = this\n\n      stopAnimation()\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { mergedConfig, calcHeights } = this\n\n      if (!mergedConfig) return\n\n      calcHeights(true)\n    },\n    calcData () {\n      const { mergeConfig, calcRowsData } = this\n\n      mergeConfig()\n\n      calcRowsData()\n\n      const { calcHeights } = this\n\n      calcHeights()\n\n      const { animation } = this\n\n      animation(true)\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    calcRowsData () {\n      let { data, rowNum, sort } = this.mergedConfig\n\n      sort && data.sort(({ value: a }, { value: b }) => {\n        if (a > b) return -1\n        if (a < b) return 1\n        if (a === b) return 0\n      })\n\n      const value = data.map(({ value }) => value)\n\n      const max = Math.max(...value) || 0\n\n      data = data.map((row, i) => ({ ...row, ranking: i + 1, percent: row.value / max * 100 }))\n\n      const rowLength = data.length\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data]\n      }\n\n      data = data.map((d, i) => ({ ...d, scroll: i }))\n\n      this.rowsData = data\n      this.rows = data\n    },\n    calcHeights (onresize = false) {\n      const { height, mergedConfig } = this\n\n      const { rowNum, data } = mergedConfig\n\n      const avgHeight = height / rowNum\n\n      this.avgHeight = avgHeight\n\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\n    },\n    async animation (start = false) {\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\n\n      const { waitTime, carousel, rowNum } = mergedConfig\n\n      const rowLength = rowsData.length\n\n      if (rowNum >= rowLength) return\n\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime))\n        if (updater !== this.updater) return\n      }\n\n      const animationNum = carousel === 'single' ? 1 : rowNum\n\n      let rows = rowsData.slice(animationIndex)\n      rows.push(...rowsData.slice(0, animationIndex))\n\n      this.rows = rows\n      this.heights = new Array(rowLength).fill(avgHeight)\n\n      await new Promise(resolve => setTimeout(resolve, 300))\n      if (updater !== this.updater) return\n\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n      animationIndex += animationNum\n\n      const back = animationIndex - rowLength\n      if (back >= 0) animationIndex = back\n\n      this.animationIndex = animationIndex\n      this.animationHandler = setTimeout(animation, waitTime - 300)\n    },\n    stopAnimation () {\n      const { animationHandler, updater } = this\n\n      this.updater = (updater + 1) % 999999\n\n      if (!animationHandler) return\n\n      clearTimeout(animationHandler)\n    }\n  },\n  destroyed () {\n    const { stopAnimation } = this\n\n    stopAnimation()\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/scrollRankingBoard/src"}]}