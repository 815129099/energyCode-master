{"remainingRequest":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\babel-loader\\lib\\index.js!E:\\code\\energy\\qiantai\\vue-energy\\src\\store\\modules\\permission.js","dependencies":[{"path":"E:\\code\\energy\\qiantai\\vue-energy\\src\\store\\modules\\permission.js","mtime":1562834777820},{"path":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"E:\\\\code\\\\energy\\\\qiantai\\\\vue-energy\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\n// store/permission.js\nimport { asyncRouterMap, constantRouterMap, userRouterMap } from '@/router';\n\nfunction hasPermission(roles, route) {\n  if (route.meta && route.meta.role) {\n    return roles.some(function (role) {\n      return route.meta.role.indexOf(role) >= 0;\n    });\n  } else {\n    return true;\n  }\n}\n\nvar permission = {\n  state: {\n    routers: constantRouterMap,\n    addRouters: []\n  },\n  mutations: {\n    SET_ROUTERS: function SET_ROUTERS(state, routers) {\n      state.addRouters = routers;\n      state.routers = constantRouterMap.concat(routers);\n    }\n  },\n  actions: {\n    GenerateRoutes: function GenerateRoutes(_ref, data) {\n      var commit = _ref.commit;\n      return new _Promise(function (resolve) {\n        var roles = data;\n        var accessedRouters;\n\n        if (roles.indexOf('admin') >= 0) {\n          accessedRouters = asyncRouterMap;\n        } else if (roles.indexOf('user') >= 0) {\n          accessedRouters = userRouterMap;\n        }\n\n        commit('SET_ROUTERS', accessedRouters);\n        resolve();\n      });\n    }\n  }\n};\nexport default permission;",{"version":3,"sources":["E:\\code\\energy\\qiantai\\vue-energy\\src\\store\\modules\\permission.js"],"names":["asyncRouterMap","constantRouterMap","userRouterMap","hasPermission","roles","route","meta","role","some","indexOf","permission","state","routers","addRouters","mutations","SET_ROUTERS","concat","actions","GenerateRoutes","data","commit","resolve","accessedRouters"],"mappings":";AAAA;AAEA,SAASA,cAAT,EAAyBC,iBAAzB,EAA2CC,aAA3C,QAAgE,UAAhE;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;AACnC,MAAIA,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWC,IAA7B,EAAmC;AACjC,WAAOH,KAAK,CAACI,IAAN,CAAW,UAAAD,IAAI;AAAA,aAAIF,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBE,OAAhB,CAAwBF,IAAxB,KAAiC,CAArC;AAAA,KAAf,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF;;AAED,IAAMG,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAEX,iBADJ;AAELY,IAAAA,UAAU,EAAE;AAFP,GADU;AAKjBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,WAAW,EAAE,qBAACJ,KAAD,EAAQC,OAAR,EAAoB;AAC/BD,MAAAA,KAAK,CAACE,UAAN,GAAmBD,OAAnB;AACAD,MAAAA,KAAK,CAACC,OAAN,GAAgBX,iBAAiB,CAACe,MAAlB,CAAyBJ,OAAzB,CAAhB;AACD;AAJQ,GALM;AAWjBK,EAAAA,OAAO,EAAE;AACPC,IAAAA,cADO,gCACoBC,IADpB,EAC0B;AAAA,UAAhBC,MAAgB,QAAhBA,MAAgB;AAC/B,aAAO,aAAY,UAAAC,OAAO,EAAI;AAC5B,YAAMjB,KAAK,GAAIe,IAAf;AACA,YAAIG,eAAJ;;AACA,YAAGlB,KAAK,CAACK,OAAN,CAAc,OAAd,KAAyB,CAA5B,EAA+B;AAC7Ba,UAAAA,eAAe,GAAGtB,cAAlB;AACD,SAFD,MAEM,IAAGI,KAAK,CAACK,OAAN,CAAc,MAAd,KAAwB,CAA3B,EAA6B;AACjCa,UAAAA,eAAe,GAAGpB,aAAlB;AACD;;AACDkB,QAAAA,MAAM,CAAC,aAAD,EAAgBE,eAAhB,CAAN;AACAD,QAAAA,OAAO;AACR,OAVM,CAAP;AAWD;AAbM;AAXQ,CAAnB;AA4BA,eAAeX,UAAf","sourcesContent":["// store/permission.js\r\n\r\nimport { asyncRouterMap, constantRouterMap,userRouterMap } from '@/router';\r\n\r\nfunction hasPermission(roles, route) {\r\n  if (route.meta && route.meta.role) {\r\n    return roles.some(role => route.meta.role.indexOf(role) >= 0)\r\n  } else {\r\n    return true\r\n  }\r\n}\r\n\r\nconst permission = {\r\n  state: {\r\n    routers: constantRouterMap,\r\n    addRouters: []\r\n  },\r\n  mutations: {\r\n    SET_ROUTERS: (state, routers) => {\r\n      state.addRouters = routers;\r\n      state.routers = constantRouterMap.concat(routers);\r\n    }\r\n  },\r\n  actions: {\r\n    GenerateRoutes({ commit }, data) {\r\n      return new Promise(resolve => {\r\n        const roles  = data;\r\n        let accessedRouters;\r\n        if(roles.indexOf('admin') >=0 ){\r\n          accessedRouters = asyncRouterMap;\r\n        }else if(roles.indexOf('user') >=0){\r\n          accessedRouters = userRouterMap;\r\n        }\r\n        commit('SET_ROUTERS', accessedRouters);\r\n        resolve();\r\n      })\r\n    }\r\n  }\r\n};\r\n\r\nexport default permission;\r\n\r\n"]}]}