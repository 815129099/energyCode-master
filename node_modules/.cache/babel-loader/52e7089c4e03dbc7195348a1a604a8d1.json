{"remainingRequest":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\thread-loader\\dist\\cjs.js!E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\babel-loader\\lib\\index.js!E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\code\\energy\\qiantai\\vue-energy\\src\\components\\page\\User.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\code\\energy\\qiantai\\vue-energy\\src\\components\\page\\User.vue","mtime":1559119701485},{"path":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport API from '@/api';\nimport Vue from 'vue';\nexport default {\n  data: function data() {\n    return {\n      //表格当前页数据\n      tableData: [],\n      //多选数组\n      multipleSelection: [],\n      //搜索条件\n      criteria: '',\n      //下拉菜单选项\n      select: '',\n      //默认每页数据量\n      pagesize: 10,\n      //默认高亮行数据id\n      highlightId: -1,\n      //当前页码\n      currentPage: 1,\n      //查询的页码\n      start: 1,\n      //默认数据总数\n      totalCount: 1000,\n      editUserForm: {\n        geNumber: '',\n        userState: ''\n      },\n      addUserForm: {\n        geNumber: '',\n        geName: '',\n        userState: '',\n        phone: '',\n        email: '',\n        password: ''\n      },\n      dialogFormVisible: false,\n      addFormVisible: false,\n      formLabelWidth: '120px',\n      rules: {\n        geNumber: [{\n          required: true,\n          message: '请填写工号',\n          trigger: 'blur'\n        }, {\n          min: 7,\n          max: 7,\n          message: '请填写7个字符的工号',\n          trigger: 'blur'\n        }],\n        geName: [{\n          required: true,\n          message: '请填写姓名',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 4,\n          message: '请填写2-4个字符的姓名',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请填写密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          max: 10,\n          message: '请填写6-10个字符的密码',\n          trigger: 'blur'\n        }],\n        userState: [{\n          required: true,\n          message: '请选择状态',\n          trigger: 'blur'\n        }],\n        phone: [{\n          validator: function validator(rule, value, callback) {\n            var vdt = API.validate.VDATA(value, {\n              \"required\": {\n                msg: \"请输入手机号\"\n              },\n              \"mphone\": {\n                msg: \"请输入有效的手机号\"\n              }\n            });\n\n            if (!vdt.result) {\n              callback(new Error(vdt.msg));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        email: [{\n          validator: function validator(rule, value, callback) {\n            var vdt = API.validate.VDATA(value, {\n              \"required\": {\n                msg: \"请输入邮箱\"\n              },\n              \"email\": {\n                msg: \"请输入有效的邮箱\"\n              }\n            });\n\n            if (!vdt.result) {\n              callback(new Error(vdt.msg));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.loadData(this.criteria, this.currentPage, this.pagesize);\n  },\n  methods: {\n    //从服务器读取数据\n    loadData: function loadData(criteria, pageNum, pageSize) {\n      var _this = this;\n\n      var params = {\n        'parameter': criteria,\n        'pageNum': pageNum,\n        'pageSize': pageSize\n      };\n      API.userUtil.getData(params).then(function (_ref) {\n        var data = _ref.data;\n        console.log(data);\n\n        if (data.status == 0) {\n          _this.tableData = data.data.userData;\n          _this.totalCount = data.data.number;\n        } else {\n          //this.$Message.error(data.msg);\n          _this.$message(\"请求失败！\");\n        }\n      }).catch(function (data) {\n        _this.$message(\"请求失败ww！\");\n\n        console.log(data);\n      });\n    },\n    //多选响应\n    handleSelectionChange: function handleSelectionChange(val) {\n      this.multipleSelection = val;\n    },\n    //点击行响应\n    handleclick: function handleclick(row, event, column) {\n      this.highlightId = row.id;\n    },\n    //编辑\n    handleEdit: function handleEdit(index, row) {\n      this.editUserForm.geNumber = row.geNumber;\n      this.editUserForm.userState = row.userState;\n      this.dialogFormVisible = true;\n    },\n    //修改\n    editSubmitForm: function editSubmitForm(editUserForm) {\n      var _this2 = this;\n\n      var params = {\n        'geNumber': this.editUserForm.geNumber,\n        'userState': this.editUserForm.userState\n      };\n      this.$refs[editUserForm].validate(function (valid) {\n        if (valid) {\n          API.userUtil.updateUser(params).then(function (_ref2) {\n            var data = _ref2.data;\n\n            if (data.data == true) {\n              _this2.dialogFormVisible = false;\n\n              _this2.loadData(_this2.criteria, _this2.currentPage, _this2.pagesize);\n            } else {\n              _this2.$message(\"请求失败！\");\n            }\n          }).catch(function (data) {\n            _this2.$message(\"请求失败！\");\n\n            console.log(data);\n          });\n        } else {\n          _this2.$message.error(\"请求失败！\");\n\n          return false;\n        }\n      });\n    },\n    //添加用户\n    addSubmitForm: function addSubmitForm(addUserForm) {\n      var _this3 = this;\n\n      var params = {\n        'geNumber': this.addUserForm.geNumber,\n        'geName': this.addUserForm.geName,\n        'userState': this.addUserForm.userState,\n        'phone': this.addUserForm.phone,\n        'email': this.addUserForm.email,\n        'password': this.addUserForm.password\n      };\n      this.$refs[addUserForm].validate(function (valid) {\n        if (valid) {\n          API.userUtil.addUser(params).then(function (_ref3) {\n            var data = _ref3.data;\n\n            if (data.data == true) {\n              _this3.addFormVisible = false;\n\n              _this3.$message(\"添加成功!\");\n\n              _this3.loadData(_this3.criteria, _this3.currentPage, _this3.pagesize);\n            } else {\n              _this3.$message(\"请求失败！\");\n            }\n          }).catch(function (data) {\n            _this3.$message(\"请求失败！\");\n\n            console.log(data);\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    //单行删除\n    handleDelete: function handleDelete(index, row) {\n      var _this4 = this;\n\n      var params = {\n        'geNumber': row.geNumber\n      };\n      this.$confirm('此操作将永久删除“' + row.geNumber + '”, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        API.userUtil.deleteUser(params).then(function (_ref4) {\n          var data = _ref4.data;\n\n          if (data.data == true) {\n            _this4.$message({\n              type: 'success',\n              message: '删除成功!'\n            });\n\n            _this4.loadData(_this4.criteria, _this4.currentPage, _this4.pagesize);\n          } else {\n            _this4.$message({\n              type: 'info',\n              message: '删除失败'\n            });\n          }\n        }).catch(function (data) {\n          _this4.$message(\"请求失败！\");\n        });\n\n        _this4.$message({\n          type: 'success',\n          message: '删除成功!'\n        });\n      }).catch(function () {\n        _this4.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    //搜索\n    search: function search() {\n      console.log(this.select);\n      this.loadData(this.criteria, this.currentPage, this.pagesize);\n    },\n    add: function add() {\n      this.addFormVisible = true;\n    },\n    exportUser: function exportUser() {\n      window.location.href = \"http://localhost:8088/api/exportUser.do\";\n    },\n\n    /*\r\n          //多项删除\r\n          deletenames: function(){\r\n          \tif(this.multipleSelection.length==0)\r\n          \t\treturn;\r\n          \tvar array = [];\r\n          \tthis.multipleSelection.forEach((item) = > {\r\n          \t\tarray.push(item.id);\r\n           })\r\n    \tthis.$http.post('../delete',{\"array\":array},{emulateJSON: true}).then(function(res){\r\n    \t\tthis.loadData(this.criteria, this.currentPage, this.pagesize);\r\n              },function(){\r\n                  console.log('failed');\r\n              });\r\n          },\r\n        */\n    //改变当前点击的行的class，高亮当前行\n    tableRowClassName: function tableRowClassName(row, index) {\n      if (row.id == this.highlightId) {\n        return 'info-row';\n      }\n    },\n    //每页显示数据量变更\n    handleSizeChange: function handleSizeChange(val) {\n      this.pagesize = val;\n      this.loadData(this.criteria, this.currentPage, this.pagesize);\n    },\n    //页码变更\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.currentPage = val;\n      this.loadData(this.criteria, this.currentPage, this.pagesize);\n    }\n  }\n};",null]}