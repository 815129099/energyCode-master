{"remainingRequest":"E:\\code\\energy\\qiantai\\vue-energy-copy\\node_modules\\babel-loader\\lib\\index.js!E:\\code\\energy\\qiantai\\vue-energy-copy\\src\\store\\modules\\permission.js","dependencies":[{"path":"E:\\code\\energy\\qiantai\\vue-energy-copy\\src\\store\\modules\\permission.js","mtime":1563420931954},{"path":"E:\\code\\energy\\qiantai\\vue-energy-copy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\code\\energy\\qiantai\\vue-energy-copy\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"E:\\\\code\\\\energy\\\\qiantai\\\\vue-energy-copy\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\n// store/permission.js\nimport { asyncRouterMap, constantRouterMap, menuLists } from '@/router';\n/**\r\n * 根据路由判断用户是否拥有此菜单\r\n * @param menus\r\n * @param route\r\n */\n\nfunction hasPermission(menus, route) {\n  if (route.menu) {\n    /*\r\n    * 如果这个路由有menu属性,就需要判断用户是否拥有此menu权限\r\n    */\n    return menus.indexOf(route.menu) > -1;\n  } else {\n    return true;\n  }\n}\n/**\r\n * 根据菜单判断用户是否拥有此菜单\r\n * @param menus\r\n * @param route\r\n */\n\n\nfunction hasPermission1(menus, m) {\n  if (m.index) {\n    /*\r\n    * 如果这个菜单有index属性,就需要判断用户是否拥有此menu权限\r\n    */\n    return menus.indexOf(m.index) > -1;\n  } else {\n    return true;\n  }\n}\n/**\r\n * 递归过滤异步路由表，返回符合用户菜单权限的路由表\r\n * @param asyncRouterMap\r\n * @param menus\r\n */\n\n\nfunction filterAsyncRouter(asyncRouterMap, menus) {\n  var accessedRouters = asyncRouterMap.filter(function (route) {\n    //filter,js语法里数组的过滤筛选方法\n    if (hasPermission(menus, route)) {\n      if (route.children && route.children.length) {\n        //如果这个路由下面还有下一级的话,就递归调用\n        route.children = filterAsyncRouter(route.children, menus); //如果过滤一圈后,没有子元素了,这个父级菜单就也不显示了\n\n        return route.children && route.children.length;\n      }\n\n      return true;\n    }\n\n    return false;\n  });\n  return accessedRouters;\n}\n/**\r\n * 递归过滤异步菜单栏，返回符合用户菜单权限的菜单栏\r\n * @param asyncRouterMap\r\n * @param menus\r\n */\n\n\nfunction filterMenuList(menuLists, menus) {\n  var menuList = menuLists.filter(function (m) {\n    //filter,js语法里数组的过滤筛选方法\n    if (hasPermission1(menus, m)) {\n      if (m.children && m.children.length) {\n        //如果这个路由下面还有下一级的话,就递归调用\n        m.children = filterMenuList(m.children, menus); //如果过滤一圈后,没有子元素了,这个父级菜单就也不显示了\n\n        return m.children && m.children.length;\n      }\n\n      return true;\n    }\n\n    return false;\n  });\n  return menuList;\n}\n\nvar permission = {\n  state: {\n    routers: constantRouterMap,\n    //本用户所有的路由,包括了固定的路由和下面的addRouters\n    addRouters: [],\n    //本用户的角色赋予的新增的动态路由\n    menuList: []\n  },\n  mutations: {\n    SET_ROUTERS: function SET_ROUTERS(state, routers) {\n      state.addRouters = routers;\n      state.routers = constantRouterMap.concat(routers); //将固定路由和新增路由进行合并, 成为本用户最终的全部路由信息\n    },\n    SET_MENUS: function SET_MENUS(state, menuList) {\n      state.menuList = menuList;\n    }\n  },\n  actions: {\n    GenerateRoutes: function GenerateRoutes(_ref, userPermission) {\n      var commit = _ref.commit;\n      //生成路由\n      return new _Promise(function (resolve) {\n        //roles是后台传过来的角色数组,比如['管理员','文章']\n        var role = userPermission.roleName;\n        var menus = userPermission.menuList; //声明 该角色可用的路由\n\n        var accessedRouters;\n        var menuList;\n\n        if (role === '管理员') {\n          //如果角色里包含'管理员',那么所有的路由都可以用\n          //其实管理员也拥有全部菜单,这里主要是利用角色判断,节省加载时间\n          accessedRouters = asyncRouterMap;\n          menuList = menuLists;\n        } else {\n          //否则需要通过以下方法来筛选出本角色可用的路由\n          accessedRouters = filterAsyncRouter(asyncRouterMap, menus);\n          menuList = filterMenuList(menuLists, menus);\n        } //执行设置路由的方法\n\n\n        commit('SET_ROUTERS', accessedRouters);\n        commit('SET_MENUS', menuList);\n        resolve();\n      });\n    }\n  }\n};\nexport default permission;",{"version":3,"sources":["E:\\code\\energy\\qiantai\\vue-energy-copy\\src\\store\\modules\\permission.js"],"names":["asyncRouterMap","constantRouterMap","menuLists","hasPermission","menus","route","menu","indexOf","hasPermission1","m","index","filterAsyncRouter","accessedRouters","filter","children","length","filterMenuList","menuList","permission","state","routers","addRouters","mutations","SET_ROUTERS","concat","SET_MENUS","actions","GenerateRoutes","userPermission","commit","resolve","role","roleName"],"mappings":"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","sourcesContent":["// store/permission.js\r\n\r\nimport { asyncRouterMap, constantRouterMap,menuLists } from '@/router';\r\n\r\n/**\r\n * 根据路由判断用户是否拥有此菜单\r\n * @param menus\r\n * @param route\r\n */\r\nfunction hasPermission(menus, route) {\r\n  if (route.menu) {\r\n    /*\r\n    * 如果这个路由有menu属性,就需要判断用户是否拥有此menu权限\r\n    */\r\n    return menus.indexOf(route.menu) > -1;\r\n  } else {\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * 根据菜单判断用户是否拥有此菜单\r\n * @param menus\r\n * @param route\r\n */\r\nfunction hasPermission1(menus, m) {\r\n  if (m.index) {\r\n    /*\r\n    * 如果这个菜单有index属性,就需要判断用户是否拥有此menu权限\r\n    */\r\n    return menus.indexOf(m.index) > -1;\r\n  } else {\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * 递归过滤异步路由表，返回符合用户菜单权限的路由表\r\n * @param asyncRouterMap\r\n * @param menus\r\n */\r\nfunction filterAsyncRouter(asyncRouterMap, menus) {\r\n  const accessedRouters = asyncRouterMap.filter(route => {\r\n    //filter,js语法里数组的过滤筛选方法\r\n    if (hasPermission(menus, route)) {\r\n      if (route.children && route.children.length) {\r\n        //如果这个路由下面还有下一级的话,就递归调用\r\n        route.children = filterAsyncRouter(route.children, menus)\r\n        //如果过滤一圈后,没有子元素了,这个父级菜单就也不显示了\r\n        return (route.children && route.children.length)\r\n      }\r\n      return true\r\n    }\r\n    return false\r\n  })\r\n  return accessedRouters\r\n}\r\n\r\n/**\r\n * 递归过滤异步菜单栏，返回符合用户菜单权限的菜单栏\r\n * @param asyncRouterMap\r\n * @param menus\r\n */\r\nfunction filterMenuList(menuLists, menus) {\r\n  const menuList = menuLists.filter(m => {\r\n    //filter,js语法里数组的过滤筛选方法\r\n    if (hasPermission1(menus, m)) {\r\n      if (m.children && m.children.length) {\r\n        //如果这个路由下面还有下一级的话,就递归调用\r\n        m.children = filterMenuList(m.children, menus)\r\n        //如果过滤一圈后,没有子元素了,这个父级菜单就也不显示了\r\n        return (m.children && m.children.length)\r\n      }\r\n      return true\r\n    }\r\n    return false\r\n  })\r\n  return menuList\r\n}\r\n\r\nconst permission = {\r\n  state: {\r\n    routers: constantRouterMap, //本用户所有的路由,包括了固定的路由和下面的addRouters\r\n    addRouters: [], //本用户的角色赋予的新增的动态路由\r\n    menuList:[]\r\n  },\r\n  mutations: {\r\n    SET_ROUTERS: (state, routers) => {\r\n      state.addRouters = routers\r\n      state.routers = constantRouterMap.concat(routers) //将固定路由和新增路由进行合并, 成为本用户最终的全部路由信息\r\n    },\r\n    SET_MENUS: (state, menuList) => {\r\n      state.menuList = menuList\r\n    }\r\n  },\r\n  actions: {\r\n    GenerateRoutes({commit}, userPermission) {\r\n      //生成路由\r\n      return new Promise(resolve => {\r\n        //roles是后台传过来的角色数组,比如['管理员','文章']\r\n        const role = userPermission.roleName;\r\n        const menus = userPermission.menuList;\r\n        //声明 该角色可用的路由\r\n        let accessedRouters;\r\n        let menuList;\r\n        if (role === '管理员') {\r\n          //如果角色里包含'管理员',那么所有的路由都可以用\r\n          //其实管理员也拥有全部菜单,这里主要是利用角色判断,节省加载时间\r\n          accessedRouters = asyncRouterMap;\r\n          menuList = menuLists;\r\n        } else {\r\n          //否则需要通过以下方法来筛选出本角色可用的路由\r\n          accessedRouters = filterAsyncRouter(asyncRouterMap, menus)\r\n          menuList = filterMenuList(menuLists,menus);\r\n        }\r\n        //执行设置路由的方法\r\n        commit('SET_ROUTERS', accessedRouters);\r\n        commit('SET_MENUS',menuList);\r\n        resolve()\r\n      })\r\n    }\r\n  }\r\n}\r\nexport default permission\r\n"]}]}