{"remainingRequest":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\code\\energy\\qiantai\\vue-energy\\src\\components\\page\\InstantPowerAnalyze.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\code\\energy\\qiantai\\vue-energy\\src\\components\\page\\InstantPowerAnalyze.vue","mtime":1561709279010},{"path":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\code\\energy\\qiantai\\vue-energy\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport API from \"@/api\";\r\nimport Vue from \"vue\";\r\nimport \"v-charts/lib/style.css\";\r\nimport 'echarts/lib/component/dataZoom';\r\nexport default {\r\n  data() {\r\n    this.dataZoom = [\r\n        {\r\n          type: 'slider',\r\n          start: 0,\r\n          end: 100\r\n        }\r\n      ]\r\n    this.markLine = {\r\n      data: [\r\n        {\r\n          name: \"平均线\",\r\n          type: \"average\"\r\n        }\r\n      ]\r\n    };\r\n    this.markPoint = {\r\n      data: [\r\n        {\r\n          name: \"最大值\",\r\n          type: \"max\"\r\n        },\r\n        {\r\n          name: \"最小值\",\r\n          type: \"min\"\r\n        }\r\n      ]\r\n    };\r\n    this.toolbox = {\r\n      feature: {\r\n        magicType: { type: [\"line\", \"bar\"] },\r\n        saveAsImage: {}\r\n      }\r\n    };\r\n    return {\r\n      beginTime: \"\",\r\n      dataType: \"I\",\r\n      chartData: {\r\n        columns: [],\r\n        rows: []\r\n      },\r\n      dataEmpty: true,\r\n      //表格当前页数据\r\n      tableData: [],\r\n      //多选数组\r\n      multipleSelection: [],\r\n      //下拉菜单选项\r\n      select: \"\",\r\n      //默认每页数据量\r\n      pagesize: 1100,\r\n      //默认高亮行数据id\r\n      highlightId: -1,\r\n      //当前页码\r\n      currentPage: 1,\r\n      //查询的页码\r\n      start: 1,\r\n      //默认数据总数\r\n      totalCount: 0,\r\n      chartDataI: null,\r\n      chartDataU: null,\r\n      formLabelWidth: \"120px\",\r\n      //树状图列表\r\n      list: \"\",\r\n      //间隔时间类型\r\n      dateType: \"day\",\r\n      //图形类型\r\n      chartType: \"bar\",\r\n      //所选电表\r\n      key: \"\",\r\n      height: 20,\r\n      Title: \"Title\",\r\n      EStationName:\"\"\r\n    };\r\n  },\r\n  components: {},\r\n  created() {\r\n    this.loadMenu();\r\n  },\r\n  methods: {\r\n    //从服务器读取数据\r\n    selectMenu: function(key, keyPath, name) {\r\n      this.EStationName = keyPath[1].split(\"/\")[1];\r\n      console.log(keyPath.length);\r\n      if(keyPath.length<=2){\r\n        this.key = \"\";\r\n      }else{\r\n        this.key = keyPath[2].split(\"/\")[1];\r\n      }\r\n    },\r\n\r\n    //加载树状图\r\n    loadMenu: function() {\r\n      API.powerUtil\r\n        .getMenu()\r\n        .then(({ data }) => {\r\n          console.log(data.data);\r\n          if (data.status == 0) {\r\n            this.list = data.data;\r\n          } else {\r\n            this.$message(\"请求失败！\");\r\n          }\r\n        })\r\n        .catch(data => {\r\n          this.$message(\"请求失败ww！\");\r\n          console.log(data);\r\n        });\r\n    },\r\n\r\n    increaseHeight() {\r\n      this.height += 10;\r\n    },\r\n\r\n    fillData(data) {\r\n      this.chartDataI = {\r\n        columns: [\"Time\", \"Ia\", \"Ib\", \"Ic\"],\r\n        rows: data\r\n      };\r\n      this.chartDataU = {\r\n        columns: [\"Time\", \"Ua\", \"Ub\", \"Uc\"],\r\n        rows: data\r\n      };\r\n       if (data.length==0) {\r\n        this.dataEmpty = true;\r\n      }else{\r\n        this.dataEmpty = false;\r\n      }\r\n    },\r\n\r\n    getPowerData: function() {\r\n      if (this.key == null || this.key == \"\") {\r\n        this.$message(\"请选择电表！\");\r\n      } else if (this.beginTime == \"\") {\r\n        this.$message(\"请选择开始时间！\");\r\n      } else if (this.dataType == \"\") {\r\n        this.$message(\"请选择电流电压类型！\");\r\n      } else if (this.dateType == \"\") {\r\n        this.$message(\"请选择曲线类型\");\r\n      } else {\r\n        if (this.dateType == \"day\") {\r\n          this.Title = this.key + \"：日曲线\";\r\n        } else if (this.dateType == \"week\") {\r\n          this.Title = this.key + \"：周曲线\";\r\n        }\r\n        let params = {\r\n          estationName:this.EStationName,\r\n          emeterName: this.key,\r\n          beginTime: this.beginTime,\r\n          dateType: this.dateType,\r\n          pageNum: this.currentPage,\r\n          pageSize: this.pagesize\r\n        };\r\n        API.powerUtil\r\n          .getInstantPowerAnalyze(params)\r\n          .then(({ data }) => {\r\n            if (data.status == 0) {\r\n              this.tableData = data.data.page.list;\r\n              this.totalCount = data.data.page.total;\r\n              this.fillData(data.data.page.list);\r\n            } else {\r\n              this.$message(\"请求失败！\");\r\n            }\r\n          })\r\n          .catch(data => {\r\n            this.$message(\"请求失败ww！\");\r\n            console.log(data);\r\n          });\r\n      }\r\n    },\r\n\r\n    //多选响应\r\n    handleSelectionChange: function(val) {\r\n      this.multipleSelection = val;\r\n    },\r\n\r\n    //点击行响应\r\n    handleclick: function(row, event, column) {\r\n      this.highlightId = row.id;\r\n    },\r\n    exportData() {\r\n      //window.location.href = \"http://localhost:8088/api/exportUser.do\";\r\n      this.$message(\"待开发\");\r\n    },\r\n    callData() {\r\n      //window.location.href = \"http://localhost:8088/api/exportUser.do\";\r\n      //this.$message(\"待开发\");\r\n      API.userUtil\r\n        .getAllData()\r\n        .then(({ data }) => {\r\n          if (data.status == 0) {\r\n          } else {\r\n            this.$message(\"请求失败！\");\r\n          }\r\n        })\r\n        .catch(data => {\r\n          this.$message(\"请求失败ww！\");\r\n          console.log(data);\r\n        });\r\n    },\r\n\r\n    //改变当前点击的行的class，高亮当前行\r\n    tableRowClassName: function(row, index) {\r\n      if (row.id == this.highlightId) {\r\n        return \"info-row\";\r\n      }\r\n    },\r\n\r\n    //每页显示数据量变更\r\n    handleSizeChange: function(val) {\r\n      this.pagesize = val;\r\n      this.getPowerData();\r\n    },\r\n\r\n    //页码变更\r\n    handleCurrentChange: function(val) {\r\n      this.currentPage = val;\r\n      this.getPowerData();\r\n    }\r\n  },\r\n  computed: {\r\n    myStyles() {\r\n      return {\r\n        height: `${this.height}px`,\r\n        position: \"relative\"\r\n      };\r\n    }\r\n  }\r\n};\r\n",null]}